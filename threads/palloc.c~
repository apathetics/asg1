#include "threads/palloc.h"
#include <bitmap.h>
#include <debug.h>
#include <inttypes.h>
#include <round.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include "threads/loader.h"
#include "threads/synch.h"
#include "threads/vaddr.h"
#include "threads/thread.h"
#include "userprog/pagedir.h"
#include "vm/frame.h"
extern struct frame_table frame_table;

void
palloc_init (size_t user_page_limit)
{
   int num_user_pages = old_palloc_init(user_page_limit); 
   size_t bm_pages = DIV_ROUND_UP (bitmap_buf_size (num_user_pages), PGSIZE);
   frame_table_init(num_user_pages - bm_pages);
}

/* Obtains and returns a group of PAGE_CNT contiguous free pages.
   If PAL_USER is set, the pages are obtained from the user pool,
   otherwise from the kernel pool.  If PAL_ZERO is set in FLAGS,
   then the pages are filled with zeros.  If too few pages are
   available, returns a null pointer, unless PAL_ASSERT is set in
   FLAGS, in which case the kernel panics. */
bool
palloc_multiple (enum palloc_flags flags, size_t page_cnt, void * upage, bool writable)
{ 
   bool success = false;
   if(!(flags & PAL_USER))
     PANIC ("This function cannot be called without PAL_USER flag set\n");
   else
   {

    // change this
    struct pool *pool = &frame_table.frame_pool;
    size_t page_idx;

    if (page_cnt == 0)
      return NULL;

    lock_acquire (&pool->lock);
    page_idx = bitmap_scan_and_flip (pool->used_map, 0, page_cnt, false);
    lock_release (&pool->lock);

    if (page_idx != BITMAP_ERROR)
    {
        size_t i;
        for(i = page_idx; i < page_idx + page_cnt; i++)
        {
           success = palloc_page(flags, upage + PGSIZE, writable);
           printf("success value for page index %d = %d\n", i, success);
           if(!success) 	
           {
              // add code to deallocate all allocated pages for this process
              // and unflip bits in pool  bitmpa_flip(page_idx, page_cnt);
              return false;
           }
        }
    }
    else 
    {
       if (flags & PAL_ASSERT)
          PANIC ("palloc_get: out of pages");
    }
  }
  return success;
}

void *
palloc_get_multiple (enum palloc_flags flags, size_t page_cnt)
{
     ASSERT(!(flags & PAL_USER))
     return old_palloc_get_multiple (flags, page_cnt);
}

/* Obtains a single free page and returns its kernel virtual
   address.
   If PAL_USER is set, the page is obtained from the user pool,
   otherwise from the kernel pool.  If PAL_ZERO is set in FLAGS,
   then the page is filled with zeros.  If no pages are
   available, returns a null pointer, unless PAL_ASSERT is set in
   FLAGS, in which case the kernel panics. */
bool
palloc_page (enum palloc_flags flags, void * upage, bool writable) 
{
   bool success = false;
   if(!(flags & PAL_USER))
     PANIC ("This function cannot be called without PAL_USER flag set\n");

    // change this
    struct pool *pool = &frame_table.frame_pool;
    size_t page_idx;

    lock_acquire (&pool->lock);
    page_idx = bitmap_scan_and_flip (pool->used_map, 0, 1, false);
    lock_release (&pool->lock);

   if(!(flags & PAL_USER))
     PANIC ("This function cannot be called without PAL_USER flag set\n");
   struct frame_entry * cur_frame;
   cur_frame = frame_table.frames + page_idx;
	cur_frame->pid = thread_current()->tid;
	cur_frame->page_num = pg_no(upage);
	cur_frame->reference = true;  
	cur_frame->dirty = false;
	cur_frame->resident = true;
    success = install_page (upage, cur_frame->kpage, writable);
printf("success after installing upage %p in palloc page = %d\n", upage, success);
   if(!success)
   {
      if (flags & PAL_ASSERT)
         PANIC ("palloc_get: out of pages"); // change this?
   }
   else if (flags & PAL_ZERO)
      memset (upage, 0, PGSIZE);

   return success;
}

/* Obtains a single free page and returns its kernel virtual
   address.
   If PAL_USER is set, the page is obtained from the user pool,
   otherwise from the kernel pool.  If PAL_ZERO is set in FLAGS,
   then the page is filled with zeros.  If no pages are
   available, returns a null pointer, unless PAL_ASSERT is set in
   FLAGS, in which case the kernel panics. */
void *
palloc_get_page (enum palloc_flags flags) 
{
  return palloc_get_multiple (flags, 1);
}

/* Frees the PAGE_CNT pages starting at PAGES. */
void
palloc_free_multiple (void *pages, size_t page_cnt) 
{
  // change this/add code
  old_palloc_free_multiple(pages, page_cnt);
}

void palloc_free_upage(void * page)
{
  palloc_free_umultiple(page, 1);
}

void palloc_free_umultiple(void *pages, size_t page_cnt) 
{
  size_t i;
  for(i = 0; i < page_cnt; i++)
  {
     void * kpage =lookup_page(thread_current()->pagedir, pages + i * PGSIZE, false);
     palloc_free_page(kpage);
  }
}

/* Frees the page at PAGE. */
void
palloc_free_page (void *page) 
{
  // change this/add code
  old_palloc_free_page (page);
}

/* Adds a mapping from user virtual address UPAGE to kernel
   virtual address KPAGE to the page table.
   If WRITABLE is true, the user process may modify the page;
   otherwise, it is read-only.
   UPAGE must not already be mapped.
   KPAGE should probably be a page obtained from the user pool
   with palloc_get_page().
   Returns true on success, false if UPAGE is already mapped or
   if memory allocation fails. */
bool
install_page (void *upage, void *kpage, bool writable)
{
  struct thread *t = thread_current ();

  /* Verify that there's not already a page at that virtual
     address, then map our page there. */
  bool isnull = (pagedir_get_page (t->pagedir, upage) == NULL);
printf("isnull boolean in install page = %d\n", isnull);
  bool pageset = false;
  if(isnull)
     pageset = pagedir_set_page (t->pagedir, upage, kpage, writable);
printf("pageset boolean in install page = %d\n", pageset);
  return (isnull && pageset);
}

